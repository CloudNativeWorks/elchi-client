name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build-linux-amd64:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.1'

    - name: Install build dependencies
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y build-essential pkg-config libsystemd-dev

    - name: Download dependencies
      run: go mod download

    - name: Build for Linux AMD64
      run: |
        VERSION="${{ github.event.inputs.version }}"
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -tags systemd -ldflags="-w -s -X main.version=$VERSION" -o elchi-client-linux-amd64 main.go

    - name: Create checksum
      run: |
        sha256sum elchi-client-linux-amd64 > elchi-client-linux-amd64.sha256

    - name: Upload Linux AMD64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-amd64
        path: |
          elchi-client-linux-amd64
          elchi-client-linux-amd64.sha256

  build-linux-arm64:
    runs-on: self-hosted
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build ARM64 binary with Docker
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # Create Dockerfile for ARM64 build
        cat > Dockerfile.arm64 <<EOF
        FROM --platform=linux/arm64 golang:1.24.1-bookworm
        
        # Install build dependencies
        RUN apt-get update && apt-get install -y \\
            build-essential \\
            pkg-config \\
            libsystemd-dev \\
            && rm -rf /var/lib/apt/lists/*
        
        WORKDIR /build
        COPY . .
        
        # Download dependencies and build
        RUN go mod download
        RUN CGO_ENABLED=1 go build -tags systemd -ldflags="-w -s -X main.version=$VERSION" -o elchi-client-linux-arm64 main.go
        EOF
        
        # Build using Docker with ARM64 platform
        docker build --platform linux/arm64 -f Dockerfile.arm64 -t elchi-arm64-builder .
        
        # Extract the binary from container
        docker create --name temp-container elchi-arm64-builder
        docker cp temp-container:/build/elchi-client-linux-arm64 ./elchi-client-linux-arm64
        docker rm temp-container
        
        # Cleanup
        docker rmi elchi-arm64-builder
        rm Dockerfile.arm64

    - name: Create checksum
      run: |
        shasum -a 256 elchi-client-linux-arm64 > elchi-client-linux-arm64.sha256

    - name: Upload Linux ARM64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64
        path: |
          elchi-client-linux-arm64
          elchi-client-linux-arm64.sha256

  release:
    needs: [build-linux-amd64, build-linux-arm64]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Prepare config file
      run: |
        cp config_template.yaml config.yaml

    - name: Create and push tag
      run: |
        VERSION="${{ github.event.inputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag "v$VERSION"
        git push origin "v$VERSION"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          elchi-client-linux-amd64
          elchi-client-linux-amd64.sha256
          elchi-client-linux-arm64
          elchi-client-linux-arm64.sha256
          elchi-install.sh
          config.yaml
          LICENSE
        tag_name: v${{ github.event.inputs.version }}
        name: Elchi Client v${{ github.event.inputs.version }}
        body: |
          ## Elchi Client v${{ github.event.inputs.version }}
          
          ### Download:
          
          **Linux AMD64:**
          - `elchi-client-linux-amd64`
          - `elchi-client-linux-amd64.sha256`
          
          **Linux ARM64:**
          - `elchi-client-linux-arm64`
          - `elchi-client-linux-arm64.sha256`
          
          ### Installation:
          
          ```bash
          # Download installer
          wget https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/elchi-install.sh
          
          # Production setup (cloud defaults to 'other')
          sudo bash elchi-install.sh \
            --name=web-server-01 \
            --host=backend.elchi.io \
            --port=443 \
            --tls=true \
            --token=your-auth-token
          
          # OpenStack deployment (use your cloud name from UI)
          sudo bash elchi-install.sh \
            --name=openstack-vm \
            --host=controller.elchi.io \
            --port=443 \
            --tls=true \
            --token=prod-token \
            --cloud=my-openstack
          
          # With BGP routing
          sudo bash elchi-install.sh \
            --enable-bgp \
            --name=edge-router \
            --host=controller.elchi.io \
            --port=443 \
            --tls=true \
            --token=prod-token \
            --cloud=production
          ```
          
          ### Configuration Options:
          
          **Required Parameters:**
          - `--name=NAME`: Client name
          - `--host=HOST`: Server address  
          - `--port=PORT`: Server port (1-65535)
          - `--tls=true|false`: Enable TLS
          - `--token=TOKEN`: Authentication token (min 8 chars)
          
          **Optional Parameters:**
          - `--cloud=CLOUD`: Cloud/infrastructure provider (defaults to 'other')
          - `--enable-bgp`: Install FRR routing
          
          **Important Note:**
          - If you are deploying on OpenStack, specify `--cloud=YOUR_CLOUD_NAME` (use the cloud name from your UI)
          
          ### Manual Installation:
          
          ```bash
          # For AMD64
          wget https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/elchi-client-linux-amd64
          sudo mv elchi-client-linux-amd64 /usr/local/bin/elchi-client
          sudo chmod +x /usr/local/bin/elchi-client
          
          # For ARM64
          wget https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/elchi-client-linux-arm64
          sudo mv elchi-client-linux-arm64 /usr/local/bin/elchi-client
          sudo chmod +x /usr/local/bin/elchi-client
          ```
          
          ### Verification:
          
          ```bash
          # For AMD64
          sha256sum -c elchi-client-linux-amd64.sha256
          
          # For ARM64
          sha256sum -c elchi-client-linux-arm64.sha256
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}